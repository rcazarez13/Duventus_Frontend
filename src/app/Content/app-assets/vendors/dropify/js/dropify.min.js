!function (e, i) { "function" == typeof define && define.amd ? define(["jquery"], i) : "object" == typeof exports ? module.exports = i(require("jquery")) : e.Dropify = i(e.jQuery) }(this, function (e) { var i = "dropify"; function t(i, t) { window.File && window.FileReader && window.FileList && window.Blob && (this.element = i, this.input = e(this.element), this.wrapper = null, this.preview = null, this.filenameWrapper = null, this.settings = e.extend(!0, { defaultFile: "", maxFileSize: "5M", minWidth: 0, maxWidth: 0, minHeight: 0, maxHeight: 0, showRemove: !0, showLoader: !0, showErrors: !0, errorTimeout: 3e3, errorsPosition: "overlay", imgFileExtensions: ["png", "jpg", "jpeg", "gif", "bmp"], maxFileSizePreview: "5M", allowedFormats: ["portrait", "square", "landscape"], allowedFileExtensions: ["*"], messages: { default: "Arrastre y suelte un archivo aqu\xed o haga clic aqu\xed", replace: "Arrastre y suelte un archivo aqu\xed o haga clic aqu\xed para reemplazar", remove: "Elminar", error: "Ooops, ocurri\xf3 un error." }, error: { fileSize: "El tama\xf1o del archivo es muy grande ({{ value }} max).", minWidth: "El ancho de la imagen es demasiado peque\xf1o ({{ value }}}px min).", maxWidth: "El ancho de la imagen es demasiado grande ({{ value }}}px max).", minHeight: "La altura de la imagen es demasiado peque\xf1o. ({{ value }}}px min).", maxHeight: "La altura de la imagen es demasiado gramde. ({{ value }}px max).", imageFormat: "El formato de la imagen no est\xe1 permitido. (Permitidos: {{ value }}).", fileExtension: "El archivo no est\xe1 permitido. (Permitidos: {{ value }})." }, tpl: { wrap: '<div class="dropify-wrapper"></div>', loader: '<div class="dropify-loader"></div>', message: '<div class="dropify-message"><span class="file-icon" /> <p>{{ default }}</p></div>', preview: '<div class="dropify-preview"><span class="dropify-render"></span><div class="dropify-infos"><div class="dropify-infos-inner"><p class="dropify-infos-message">{{ replace }}</p></div></div></div>', filename: '<p class="dropify-filename"><span class="dropify-filename-inner"></span></p>', clearButton: '<button type="button" class="dropify-clear">{{ remove }}</button>', errorLine: '<p class="dropify-error">{{ error }}</p>', errorsContainer: '<div class="dropify-errors-container"><ul></ul></div>' } }, t, this.input.data()), this.errorsEvent = e.Event("dropify.errors"), this.isDisabled = !1, this.isInit = !1, this.file = { object: null, name: null, size: null, width: null, height: null, type: null }, Array.isArray(this.settings.allowedFormats) || (this.settings.allowedFormats = this.settings.allowedFormats.split(" ")), Array.isArray(this.settings.allowedFileExtensions) || (this.settings.allowedFileExtensions = this.settings.allowedFileExtensions.split(" ")), this.onChange = this.onChange.bind(this), this.clearElement = this.clearElement.bind(this), this.onFileReady = this.onFileReady.bind(this), this.translateMessages(), this.createElements(), this.setContainerSize(), this.errorsEvent.errors = [], this.input.on("change", this.onChange), this.input[0].defaultValue && this.setPreview(!1, this.input[0].defaultValue)) } return t.prototype.onChange = function () { this.resetPreview(), this.readFile(this.element) }, t.prototype.createElements = function () { this.isInit = !0, this.input.wrap(e(this.settings.tpl.wrap)), this.wrapper = this.input.parent(); var i = e(this.settings.tpl.message).insertBefore(this.input); e(this.settings.tpl.errorLine).appendTo(i), !0 === this.isTouchDevice() && this.wrapper.addClass("touch-fallback"), this.input.attr("disabled") && (this.isDisabled = !0, this.wrapper.addClass("disabled")), !0 === this.settings.showLoader && (this.loader = e(this.settings.tpl.loader), this.loader.insertBefore(this.input)), this.preview = e(this.settings.tpl.preview), this.preview.insertAfter(this.input), !1 === this.isDisabled && !0 === this.settings.showRemove && (this.clearButton = e(this.settings.tpl.clearButton), this.clearButton.insertAfter(this.input), this.clearButton.on("click", this.clearElement)), this.filenameWrapper = e(this.settings.tpl.filename), this.filenameWrapper.prependTo(this.preview.find(".dropify-infos-inner")), !0 === this.settings.showErrors && (this.errorsContainer = e(this.settings.tpl.errorsContainer), "outside" === this.settings.errorsPosition ? this.errorsContainer.insertAfter(this.wrapper) : this.errorsContainer.insertBefore(this.input)); var t = this.settings.defaultFile || ""; "" !== t.trim() && (this.file.name = this.cleanFilename(t), this.setPreview(this.isImage(), t)) }, t.prototype.readFile = function (i) { if (i.files && i.files[0]) { var t = new FileReader, s = new Image, r = i.files[0], n = null, o = this, a = e.Event("dropify.fileReady"); this.clearErrors(), this.showLoader(), this.setFileInformations(r), this.errorsEvent.errors = [], this.checkFileSize(), this.isFileExtensionAllowed(), this.isImage() && this.file.size < this.sizeToByte(this.settings.maxFileSizePreview) ? (this.input.on("dropify.fileReady", this.onFileReady), t.readAsDataURL(r), t.onload = (function (e) { n = e.target.result, s.src = e.target.result, s.onload = function () { o.setFileDimensions(this.width, this.height), o.validateImage(), o.input.trigger(a, [!0, n]) } }).bind(this)) : this.onFileReady(!1) } }, t.prototype.onFileReady = function (e, i, t) { if (this.input.off("dropify.fileReady", this.onFileReady), 0 === this.errorsEvent.errors.length) this.setPreview(i, t); else { this.input.trigger(this.errorsEvent, [this]); for (var s = this.errorsEvent.errors.length - 1; s >= 0; s--) { var r = this.errorsEvent.errors[s].namespace.split(".").pop(); this.showError(r) } if (void 0 !== this.errorsContainer) { this.errorsContainer.addClass("visible"); var n = this.errorsContainer; setTimeout(function () { n.removeClass("visible") }, this.settings.errorTimeout) } this.wrapper.addClass("has-error"), this.resetPreview(), this.clearElement() } }, t.prototype.setFileInformations = function (e) { this.file.object = e, this.file.name = e.name, this.file.size = e.size, this.file.type = e.type, this.file.width = null, this.file.height = null }, t.prototype.setFileDimensions = function (e, i) { this.file.width = e, this.file.height = i }, t.prototype.setPreview = function (i, t) { if (this.input.hasClass("non-preview")) { let s = [".pdf"], r = [".jpg", ".jpeg", ".png"], n = this.input[0].files, o = this.input.closest(".dropify-wrapper"), a = o.find(".dropify-preview"), h = o.find(".dropify-filename-inner"), l = o.find(".dropify-render"); 0 === l.length && (a.append('<span class="dropify-render"></span>'), l = o.find(".dropify-render")), l.html(""), o.removeClass("dropify-error").removeClass("has-error").addClass("has-preview"); let p = o.parent().find("select"); if (n.length > 0) { let d = Array.from(n).map(e => e.name); p.html(d.map(e => "<option value='" + e + "'>" + e + "</option>")), p.val(d).trigger("change"), h.html(d.join("</br>")); let f = 100 / d.length + "%"; l.append(d.map(function (i) { return e("<img>").attr("src", s.some(e => i.includes(e)) ? "/Content/app-assets/images/pdf_file.gif" : (r.some(e => i.includes(e)), "/Content/app-assets/images/image_file.gif")).css("max-width", f) })), a.show() } this.hideLoader(); return } t = t || this.file.name, this.wrapper.removeClass("has-error").addClass("has-preview"), this.filenameWrapper.children(".dropify-filename-inner").html(t); var g = this.preview.children(".dropify-render"); if (this.hideLoader(), this.input.hasClass("extension-preview")) { t = [".pdf"].some(e => t.includes(e)) ? "/Content/app-assets/images/pdf_file.gif" : ([".jpg", ".jpeg", ".png"].some(e => t.includes(e)), "/Content/app-assets/images/image_file.gif"); var u = e("<img />").attr("src", t); this.settings.height && u.css("max-height", this.settings.height), u.appendTo(g) } else if (!0 === i) { var u = e("<img />").attr("src", t); this.settings.height && u.css("max-height", this.settings.height), u.appendTo(g) } else e("<i />").attr("class", "dropify-font-file").appendTo(g), e('<span class="dropify-extension" />').html(this.getFileType()).appendTo(g); this.preview.fadeIn() }, t.prototype.resetPreview = function () { this.wrapper.removeClass("has-preview"); var e = this.preview.children(".dropify-render"); e.find(".dropify-extension").remove(), e.find("i").remove(), e.find("img").remove(), this.preview.hide(), this.hideLoader() }, t.prototype.cleanFilename = function (e) { var i = e.split("\\").pop(); return i == e && (i = e.split("/").pop()), "" !== e ? i : "" }, t.prototype.clearElement = function () { if (0 === this.errorsEvent.errors.length) { var i = e.Event("dropify.beforeClear"); this.input.trigger(i, [this]), !1 !== i.result && (this.resetFile(), this.input.val(""), this.resetPreview(), this.input.trigger(e.Event("dropify.afterClear"), [this])) } else this.resetFile(), this.input.val(""), this.resetPreview() }, t.prototype.resetFile = function () { this.file.object = null, this.file.name = null, this.file.size = null, this.file.type = null, this.file.width = null, this.file.height = null }, t.prototype.setContainerSize = function () { this.settings.height && this.wrapper.height(this.settings.height) }, t.prototype.isTouchDevice = function () { return "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 }, t.prototype.getFileType = function () { return this.file.name.split(".").pop().toLowerCase() }, t.prototype.isImage = function () { return "-1" != this.settings.imgFileExtensions.indexOf(this.getFileType()) }, t.prototype.isFileExtensionAllowed = function () { return "-1" != this.settings.allowedFileExtensions.indexOf("*") || "-1" != this.settings.allowedFileExtensions.indexOf(this.getFileType()) || (this.pushError("fileExtension"), !1) }, t.prototype.translateMessages = function () { for (var e in this.settings.tpl) for (var i in this.settings.messages) this.settings.tpl[e] = this.settings.tpl[e].replace("{{ " + i + " }}", this.settings.messages[i]) }, t.prototype.checkFileSize = function () { 0 !== this.sizeToByte(this.settings.maxFileSize) && this.file.size > this.sizeToByte(this.settings.maxFileSize) && this.pushError("fileSize") }, t.prototype.sizeToByte = function (e) { var i = 0; if (0 !== e) { var t = e.slice(-1).toUpperCase(); "K" === t ? i = 1024 * parseFloat(e) : "M" === t ? i = 1048576 * parseFloat(e) : "G" === t && (i = 1073741824 * parseFloat(e)) } return i }, t.prototype.validateImage = function () { 0 !== this.settings.minWidth && this.settings.minWidth >= this.file.width && this.pushError("minWidth"), 0 !== this.settings.maxWidth && this.settings.maxWidth <= this.file.width && this.pushError("maxWidth"), 0 !== this.settings.minHeight && this.settings.minHeight >= this.file.height && this.pushError("minHeight"), 0 !== this.settings.maxHeight && this.settings.maxHeight <= this.file.height && this.pushError("maxHeight"), "-1" == this.settings.allowedFormats.indexOf(this.getImageFormat()) && this.pushError("imageFormat") }, t.prototype.getImageFormat = function () { return this.file.width == this.file.height ? "square" : this.file.width < this.file.height ? "portrait" : this.file.width > this.file.height ? "landscape" : void 0 }, t.prototype.pushError = function (i) { var t = e.Event("dropify.error." + i); this.errorsEvent.errors.push(t), this.input.trigger(t, [this]) }, t.prototype.clearErrors = function () { void 0 !== this.errorsContainer && this.errorsContainer.children("ul").html("") }, t.prototype.showError = function (e) { void 0 !== this.errorsContainer && this.errorsContainer.children("ul").append("<li>" + this.getError(e) + "</li>") }, t.prototype.getError = function (e) { var i = this.settings.error[e], t = ""; return ("fileSize" === e ? t = this.settings.maxFileSize : "minWidth" === e ? t = this.settings.minWidth : "maxWidth" === e ? t = this.settings.maxWidth : "minHeight" === e ? t = this.settings.minHeight : "maxHeight" === e ? t = this.settings.maxHeight : "imageFormat" === e ? t = this.settings.allowedFormats.join(", ") : "fileExtension" === e && (t = this.settings.allowedFileExtensions.join(", ")), "" !== t) ? i.replace("{{ value }}", t) : i }, t.prototype.showLoader = function () { void 0 !== this.loader && this.loader.show() }, t.prototype.hideLoader = function () { void 0 !== this.loader && this.loader.hide() }, t.prototype.destroy = function () { this.input.siblings().remove(), this.input.unwrap(), this.isInit = !1 }, t.prototype.init = function () { this.createElements() }, t.prototype.isDropified = function () { return this.isInit }, e.fn[i] = function (s) { return this.each(function () { e.data(this, i) || e.data(this, i, new t(this, s)) }), this }, t });